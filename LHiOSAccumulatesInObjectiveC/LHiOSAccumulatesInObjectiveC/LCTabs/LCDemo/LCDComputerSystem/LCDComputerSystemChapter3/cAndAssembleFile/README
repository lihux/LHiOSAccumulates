To generate file a.out, I use command: 
To generate file hello.gcc, I use command: 
To generate file hello.llvm, I use command: 
使用命令:llvm-gcc -O0 -S 114_mstore.c 生成汇编文件114_mstore.s

####exchange代码生成汇编命令探查：
以下三种输出，只有-O1 -O2 会对生成的汇编代码进行优化，且基本上优化后的结果是一样的，-O0 和什么也不加的不会对代码进行优化
``使用命令llvm-gcc -O0 -S -o 126_exchangeO0.s 126_exchange.c 生成文件126_exchangeO0.s
使用命令llvm-gcc -O1 -S -o 126_exchangeO1.s 126_exchange.c 生成文件126_exchangeO1.s
使用命令llvm-gcc -O2 -S -o 126_exchangeO1.s 126_exchange.c 生成文件126_exchangeO2.s
使用命令llvm-gcc -S 126_exchange.c 生成文件126_exchange.s``
使用llvm-gcc -S -O1 126_exchange_main.c 编程生成带main 函数的exchange汇编文件
使用llvm-gcc -c 114_mstore.c命令编译出输出114_mstore.o目标文件
使用命令llvm-gcc -o 116_prog 116_main.c 114_mstore.c生成一个完整的可执行文件
使用命令objdump -d 116_prog > 116_prog_objcdump.s生成反汇编代码
llvm-gcc -S -o lea.s lea.c 命令生成没有优化过的代码
llvm-gcc -O1 -S -o lea.s lea.c 命令生成没有优化过的代码
llvm-gcc -O1 -S -o leaO1.s lea.c
llvm-gcc -O0 -S -o 129_lea.s lea.c
llvm-gcc -O1 -S -o 129_lea.s 129_lea.c 发现编译优化代码的时候果然使用了lea，于是心情很愉悦 @ 2017年 7月26日 星期三 19时52分49秒 CST
llvm-gcc -S -o 126_3.4_movMM.s 126_3.4_movMM.c 学习mov的各种指令的用法，发现很多世界 @ 2017年 7月26日 星期三 20时03分12秒 CST
llvm-gcc -O1 -S -o 126_3.4_movMM_O1.s 126_3.4_movMM.c 继续学习mov指令 @ 2017年 7月26日 星期三 20时05分43秒 CST
llvm-gcc -O1 -S -o 145_absdiff_O1.s 145_absdiff.c命令学习编译器使用条件传送指令优化控制跳转 @ 2017年 7月29日 星期六 20时54分41秒 CST
llvm-gcc -O0 -S -o 145_absdiff_O0.s 145_absdiff.c命令学习编译器对于代码不采取优化的时候控制流跳转 @ 2017年 7月29日 星期六 20时56分36秒 CST
llvm-gcc -O0 -S -o 160_switch_eg_O0.s 160_switch_eg.c 命令查看未经优化的switch命令式如何生成汇编代码的 @ 2017年 7月30日 星期日 10时52分34秒 CST
llvm-gcc -O0/O1 -S -o 157_fact_for_while_O0/1.s 157_fact_for_while.c 探索汇编实现以及优化for循环 @ 2017年 7月30日 星期日 12时11分19秒 CST
llvm-gcc -O0/O1 -S -o 160_if_eg_O0/1.s 160_if_eg.c 使用if分支判断替换实现switch实现，看看汇编代码有什么不同 @ 2017年 7月30日 星期日 15时22分41秒 CST
llvm-gcc -O0/O1 -S -o 160_switch_eg_O0/1.s 160_switch_eg.c 修改代码笔误 @ 2017年 7月30日 星期日 15时26分36秒 CST
llvm-gcc -O0/O1 -S -o 169_procs_O0/1.s 169_procs.c 学习参数传递之子方法定义 @ 2017年 7月31日 星期一 06时49分53秒 CST
llvm-gcc -O0/O1 -S -o 169_main_O0/1.s 169_main.c 学习参数传递之main函数定义 @ 2017年 7月31日 星期一 06时52分53秒 CST
使用命令llvm-gcc -o 169_main_procs 169_main.c 169_procs.c 生成二进制可执行文件，并使用objcdump反汇编该文件，查看其参数的传递方式是否和书上写的一致（确实一致%rdi-%rsi-%rdx-%rcx-%r8-%r9-stack的优先级顺序传参） @ 2017年 7月31日 星期一 07时05分52秒 CST
