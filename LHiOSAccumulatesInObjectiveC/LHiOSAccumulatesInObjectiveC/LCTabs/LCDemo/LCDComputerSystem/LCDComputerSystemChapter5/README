llvm-gcc -O3 -o main main.c | ./main 尝试使用clock()统计执行时间
llvm-gcc  main.c vec.c vec.h 编译生成可执行文件a.out
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 测试整体是否好使 @ 2017年 8月18日 星期五 06时45分51秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 修改数组值大小 @ 2017年 8月18日 星期五 06时49分06秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 优化printf打印信息，生成可执行文件 @ 2017年 8月18日 星期五 06时53分48秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 缩小数组长度 @ 2017年 8月18日 星期五 06时56分05秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 继续优化脚本执行 @ 2017年 8月18日 星期五 06时59分38秒 CST

现在编译出来的combine1_O123运行的时候都有大概率的segment fault即段错误的情况，现在主要解决这个问题：
1.首先临时打开系统对coredump的大小的限制：
# ulimit -c unlimited
2. 运行程序，直到出现段错误，程序crash，生成的文件会在~/cores/core.PID 中，其中PID是当时运行的进程号（process ID），我屮艸芔茻，吓尿了，700多兆，吓得我调试完成之后感赶紧删掉了
3. 对生成的coredump进行调试，分析：注意，在Mac中`gdb`被替换成了`lldb`,所以就是：
#lldb combine1_O3 /cores/core.456
or:
#lldb test /cores/core.685

参考链接：
http://blog.csdn.net/cjsycyl/article/details/19198427
https://support.asperasoft.com/hc/en-us/articles/216128238-How-to-generate-core-dump-files
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 解决总是出现段错误的问题： 结构体中len字段没有赋值导致的 @ 2017年 8月20日 星期日 07时24分12秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 继续调试问题' @ 2017年 8月21日 星期一 06时37分50秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 继续调试问题:赋值出错的原因找到了 @ 2017年 8月21日 星期一 06时38分59秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 调整赋值 @ 2017年 8月21日 星期一 06时42分08秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 去掉注释 @ 2017年 8月21日 星期一 06时43分16秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 解决新的段错误的问题：将一个指向0地址的指针作为参数传入了导致的问题 @ 2017年 8月21日 星期一 06时50分39秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 乘法溢出了，所以要使用加法 @ 2017年 8月21日 星期一 07时04分49秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 测试乘法， 缩小计算值 @ 2017年 8月21日 星期一 07时09分13秒 CST
llvm-gcc -O0/1/2/3 -S -o combine1_O0/1/2/3.s combine1.c 测试乘法， 缩小计算值 @ 2017年 8月21日 星期一 07时12分11秒 CST
llvm-gcc -O0/1/2/3 -S -o combine2_O0/1/2/3.s combine2.c 优化代码，不再每次都调用方法获取数组长度 @ 2017年 8月21日 星期一 07时17分55秒 CST
llvm-gcc -O0/1/2/3 -S -o combine3_O0/1/2/3.s combine3.c 优化for循环内部的函数调用 @ 2017年 8月21日 星期一 07时23分27秒 CST
